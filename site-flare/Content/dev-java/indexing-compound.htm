<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Compound Index</h1>
  

<p>XAP supports compound indexing, where a single index structure holds references to multiple fields within objects stored within the Space.
A compound index should be used to speed up queries that match on multiple fields with <span class="tc-bold">AND</span> conditions between them.</p>

<p>Maintaining a compound index involves usually additional overhead compared to a regular index in terms of time to update the index and its footprint but it may improve query processing time substantially.</p>

<p>Compound indexes can be defined using annotations. The <code>CompoundSpaceIndex</code> and <code>CompoundSpaceIndexes</code> annotations should be used. The annotations are a type-level annotations.</p>

<p>Example: Below a compound index with two segments using annotations. Both are properties at the root level of the space class:</p>

<pre><code class="language-java">@CompoundSpaceIndexes({ @CompoundSpaceIndex(paths = {"data1", "data2"})})
@SpaceClass
public class Data {
    String id;
    String data1;
    String data2;
    // getter and setter methods - no properties need to be indexed
</code></pre>

<p>The benchmark has a space with different sets of space objects data:</p>

<table>
<thead>
<tr>
<th align="left">Condition</th>
<th align="left">Scenario 1 matching objects</th>
<th align="left">Scenario 2 matching objects</th>
<th align="left">Scenario 3 matching objects</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left">data1 = "A'</td>
<td align="left">401,000</td>
<td align="left">410,000</td>
<td align="left">400,000</td>
</tr>

<tr>
<td align="left">data2 = "B'</td>
<td align="left">100,000</td>
<td align="left">110,000</td>
<td align="left">200,000</td>
</tr>

<tr>
<td align="left">data1 = "A' AND data2 = "B'</td>
<td align="left">1000</td>
<td align="left">10,000</td>
<td align="left">100,000</td>
</tr>
</tbody>
</table>

<pre><code class="language-java">SQLQuery&lt;Data&gt; query = new SQLQuery&lt;Data&gt;(Data.class,"data1='A' and data2='B'");
</code></pre>

<p>With the above scenario the Compound Index will improve the query execution dramatically. See below comparison for a query execution time when comparing a Compound Index to a single or two indexed properties space class with the different data set scenarios.</p>

<div class="tc-align-center"><p><img src="../Resources/Static/attachment_files/compu_index_bench.jpg" alt="compu_index_bench.jpg" /></p>
</div>

<h1 id="using-gs-xml">Using gs.xml</h1>

<p>A Compound Index can be defined within the gs.xml configuration file. Example: The following a <code>gs.xml</code> describing a POJO named Data having a compound index composed from two segments:</p>

<pre><code class="language-xml">&lt;gigaspaces-mapping&gt;
    &lt;class name="Data" &gt;
        &lt;compound-index paths="data1, data2"/&gt;
        ...
    &lt;/class&gt;
&lt;/gigaspaces-mapping&gt;
</code></pre>

<h1 id="dynamic-properties">Dynamic Properties</h1>

<p>A Compound Space Index of <a href="dynamic-properties.htm">Dynamic Properties</a> can be created via annotations. Here is an example:</p>

<pre><code class="language-java">@SpaceClass
@CompoundSpaceIndexes({ @CompoundSpaceIndex(paths = {"proprties.poNumber", "properties.supplier"}) })
public class PaymentOrder {

    String id;
    DocumentProperties properties = new DocumentProperties();

    @SpaceId(autoGenerate = false)
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void addProperty(String key, String value) {
        properties.put(key, value);
    }

    public String getProperty(String key) {
        return (String) properties.get(key);
    }

    @SpaceDynamicProperties
    public DocumentProperties getProperties() {
        return properties;
    }
}
</code></pre>

<h1 id="space-document">Space Document</h1>

<p>A Compound Space Index of a <a href="document-api.htm">space Document</a> can be described by <code>pu.xml</code> configuration file. Example:</p>

<pre><code class="language-xml">&lt;os-core:embedded-space id="space" space-name="space" &gt;
    &lt;os-core:space-type type-name="Data"&gt;
        &lt;os-core:compound-index paths="data1,data2"/&gt;
    &lt;/os-core:space-type&gt;
&lt;/os-core:embedded-space&gt;
</code></pre>

<h2 id="dynamic-creation">Dynamic Creation</h2>

<p>A Compound Space Index can be added dynamically using the <code>GigaSpaceTypeManager</code> interface. Example:</p>

<pre><code class="language-java">AsyncFuture&lt;AddTypeIndexesResult&gt; indexesResultAsyncFuture = gigaSpace.getTypeManager()
    .asyncAddIndex("Data", new CompoundIndex (new String[]{"data1", "data2"}));
</code></pre>

<p>As the <code>CompoundIndex</code> is a subclass of the <code>SpaceIndex</code>, the <code>asyncAddIndex</code> method signature has not been changed.</p>

<h1 id="considerations">Considerations</h1>

<ol>
<li>An index segment cannot be a collection or a path within collection.</li>
<li>All compound index segments must have an <code>Object</code> <code>StorageType</code>.</li>
</ol>

<h1 id="limitations">Limitations</h1>

<div class="tc-admon-important">
  
  <p>If one of the query conditions makes use of the <code>IN</code> operator, compound indexes will be ignored. Separate indexes should be created.</p>
</div>

</body>
</html>