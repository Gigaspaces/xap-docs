<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Changing Code without a Restart</h1>
  

<p>The <code>@SupportCodeChange</code> annotation is used to tell the Space that your code has changed during runtime, affecting the Space task that needs to be executed. The Space can store multiple versions of the same task. This is useful in supporting client applications that may need to implement multiple different versions of a task.</p>

<p>This annotation can be used with:</p>

<ul>
<li><a href="task-execution-overview.htm">Task Execution</a><br/></li>
<li><a href="change-api-custom-operation.htm">Custom Change</a><br/></li>
<li><a href="aggregators.htm#custom-aggregation">Custom Aggregator</a></li>
</ul>

<h1 id="task-execution">Task Execution</h1>

<p>The annotation can be used when defining task execution. For example, annotate your task with <code>@SupportCodeChange(id="1")</code>. When the code changes, set the annotation to <code>@SupportCodeChange(id="2")</code>, and the Space will load the new task.</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Task version 1" style="padding:10px"><pre><code class="language-java">import org.openspaces.core.executor.Task;

import com.gigaspaces.annotation.SupportCodeChange;

@SupportCodeChange(id="1")
public class DynamicTask implements Task&lt;Integer&gt; {

    @Override
    public Integer execute() throws Exception {
        return new Integer(1);
    }
}
</code></pre>
</div>

<div title="Task version 2" style="padding:10px"><pre><code class="language-java">import org.openspaces.core.executor.Task;

import com.gigaspaces.annotation.SupportCodeChange;

@SupportCodeChange(id="2")
public class DynamicTask implements Task&lt;Integer&gt; {

    @Override
    public Integer execute() throws Exception {
        return new Integer(2);
    }
}
</code></pre>
</div>

<div title="Program" style="padding:10px"><pre><code class="language-java"> GigaSpace gigaSpace = new GigaSpaceConfigurer(new SpaceProxyConfigurer("xapSpace")).gigaSpace();

 DynamicTask task = new DynamicTask();

 AsyncFuture&lt;Integer&gt; execute = gigaSpace.execute(task);
 System.out.println(execute.get());
</code></pre>
</div>
</div>

<div class="tc-admon-refer">
  
  <p>For detailed information about task execution, see the <a href="task-execution-overview.htm">Task Execution</a> topic.</p>
</div>

<h1 id="custom-change">Custom Change</h1>

<p>The annotation can be used for custom change operations, as demonstrated in the example below.</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Change Version 1" style="padding:10px"><pre><code class="language-java">import com.gigaspaces.annotation.SupportCodeChange;
import com.gigaspaces.client.CustomChangeOperation;
import com.gigaspaces.server.MutableServerEntry;

@SupportCodeChange(id="1")
public class MultiplyIntegerChangeOperation extends CustomChangeOperation {
    private static final long serialVersionUID = 1L;
    private final String path;
    private final int multiplier;

    public MultiplyIntegerChangeOperation(String path) {
        this.path = path;
    }

    @Override
    public String getName() {
        return "multiplyInt";
    }

    public String getPath() {
        return path;
    }

    @Override
    public Object change(MutableServerEntry entry) {
        int oldValue = (Integer) entry.getPathValue(path);
        int newValue = oldValue * 10;
        entry.setPathValue(path, newValue);
        return newValue;
    }
}
</code></pre>
</div>

<div title="Change Version 2" style="padding:10px"><pre><code class="language-java">import com.gigaspaces.annotation.SupportCodeChange;
import com.gigaspaces.client.CustomChangeOperation;
import com.gigaspaces.server.MutableServerEntry;

@SupportCodeChange(id="2")
public class MultiplyIntegerChangeOperation extends CustomChangeOperation {
    private static final long serialVersionUID = 1L;
    private final String path;

    public MultiplyIntegerChangeOperation(String path) {
        this.path = path;
    }

    @Override
    public String getName() {
        return "multiplyInt";
    }

    public String getPath() {
        return path;
    }

    @Override
    public Object change(MutableServerEntry entry) {
        int oldValue = (Integer) entry.getPathValue(path);
        int newValue = oldValue * 20;
        entry.setPathValue(path, newValue);
        return newValue;
    }
}
</code></pre>
</div>

<div title="Program" style="padding:10px"><pre><code class="language-java">
    GigaSpace gigaSpace = new GigaSpaceConfigurer(new SpaceProxyConfigurer("xapSpace")).gigaSpace();

    SQLQuery&lt;Employee&gt; query = new SQLQuery&lt;Employee&gt;(Employee.class, "salary &gt; 50");
    ChangeResult&lt;Employee&gt; result = gigaSpace.change(query,
            new ChangeSet().custom(new MultiplyIntegerChangeOperation("salary")),
            ChangeModifiers.RETURN_DETAILED_RESULTS);
</code></pre>
</div>
</div>

<div class="tc-admon-refer">
  
  <p>For detailed information about the Custom Change operation, see the <a href="change-api-custom-operation.htm">Custom Change</a> topic.</p>
</div>

<h1 id="custom-aggregation">Custom Aggregation</h1>

<p>The annotation can also be used for custom aggregation operations, as demonstrated by the following example.</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Aggregation Version 1" style="padding:10px"><pre><code class="language-java">@SupportCodeChange(id ="1")
public class ConcatAggregator extends SpaceEntriesAggregator&lt;String&gt; {

    private final String path;
    private transient StringBuilder sb;

    public ConcatAggregator(String path) {
        this.path = path;
    }

    @Override
    public String getDefaultAlias() {
        return "concat(" + path + ")";
    }

    @Override
    public void aggregate(SpaceEntriesAggregatorContext context) {
        String value = (String) context.getPathValue(path);
        if (value != null)
            concat(value);
    }

    @Override
    public String getIntermediateResult() {
        return sb == null ? null : sb.toString();
    }

    @Override
    public void aggregateIntermediateResult(String partitionResult) {
        concat(partitionResult);
    }

    private void concat(String s) {
        if (sb == null) {
            sb = new StringBuilder(s);
        } else {
            sb.append(',').append(s);
        }
    }
}
</code></pre>
</div>

<div title="Aggregation Version 2" style="padding:10px"><pre><code class="language-java">@SupportCodeChange(id ="2")
public class ConcatAggregator extends SpaceEntriesAggregator&lt;String&gt; {

    private final String path;
    private transient StringBuilder sb;

    public ConcatAggregator(String path) {
        this.path = path;
    }

    @Override
    public String getDefaultAlias() {
        return "concat(" + path + ")";
    }

    @Override
    public void aggregate(SpaceEntriesAggregatorContext context) {
        String value = (String) context.getPathValue(path);
        if (value != null)
            concat(value);
    }

    @Override
    public String getIntermediateResult() {
        return sb == null ? null : sb.toString();
    }

    @Override
    public void aggregateIntermediateResult(String partitionResult) {
        concat(partitionResult);
    }

    private void concat(String s) {
        if (sb == null) {
            sb = new StringBuilder(s);
        } else {
            sb.append(':').append(s);
        }
    }
}
</code></pre>
</div>

<div title="Program" style="padding:10px"><pre><code class="language-java">    GigaSpace gigaSpace = new GigaSpaceConfigurer(new SpaceProxyConfigurer("xapSpace")).gigaSpace();
    SQLQuery&lt;Employee&gt; query = new SQLQuery&lt;Employee&gt;(Employee.class, "salary &gt; 50");
    AggregationResult result = gigaSpace.aggregate(query, new AggregationSet().add(new ConcatAggregator("name")));
    String concatResult = result.getString("concat(name)");
</code></pre>
</div>
</div>

<div class="tc-admon-refer">
  
  <p>For detailed information about how to use custom aggregators, see the <a href="aggregators.htm">Aggregators</a> topic.</p>
</div>

<h1 id="number-of-caches">Number of Caches</h1>

<p>The default limit of class loaders (caches) is 3. when this limit is breached, the oldest cache is evicted in favor of the new one.
This value can be modified via the following Space properties:</p>

<table>
<thead>
<tr>
<th>Property Name</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>

<tbody>
<tr>
<td>space-config.remote-code.max-class-loaders</td>
<td>Limit number of class loaders (caches)</td>
<td>3</td>
</tr>

<tr>
<td>space-config.remote-code.support.code.change</td>
<td>Enable/Disable code change</td>
<td>true</td>
</tr>
</tbody>
</table>

<div class="tc-admon-note">
  
  <p><code>@SupportCodeChange</code> annotations without an ID or with <code>id=""</code> are not cached.</p>
</div>

<h1 id="limitations">Limitations</h1>

<ul>
<li>When using <code>@SupportCodeChange</code>, no new types can be introduced to the Space.</li>
<li>Anonymous classes and lambdas do not support the annotation.</li>
</ul>

</body>
</html>