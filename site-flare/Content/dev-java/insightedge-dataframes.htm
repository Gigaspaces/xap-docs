<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Data Frames API</h1>
  

<p>DataFrames provide an API for manipulating data within Spark. These provide a more user friendly experience than pure Scala for common queries.</p>

<div class="tc-admon-refer">
  
  <p>To read more about DataFrames API, please refer to <a href="https://spark.apache.org/docs/latest/sql-programming-guide.htm/" target="_blank" >Spark Documentation</a>.</p>
</div>

<p>This section describes how to use the DataFrames API with the Data Grid.</p>

<h1 id="preparing">Preparing</h1>

<p>The entry point to Dataset features is Spark <code>SparkSession</code> (replaces the old <code>SQLContext</code>).</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder().getOrCreate()

// For implicit conversions like converting RDDs to DataFrames to Dataset
import spark.implicits._
// This is used to simplify calling Data Grid features
import org.insightedge.spark.implicits.all._
</code></pre>
</div>
</div>

<h1 id="person-case-class">Person case class</h1>

<p>For the following code snippets, we will use a simple case class named Person.
This case class can be written to (and loaded from) the Data Grid or an external persisted storage.</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">import org.insightedge.scala.annotation._
import scala.beans.BeanProperty

case class Person(
    @BeanProperty @SpaceId(autoGenerate = true) var id: String,
    @BeanProperty var name: String,
    @BeanProperty var age: Int ) {
   
    def this() = this(null, null, -1)
}
</code></pre>
</div>
</div>

<h1 id="creating-dataframes">Creating DataFrames</h1>

<p>RDDs are stored in Data Grid simply as collections of objects of a certain type. You can create DataFrame by such type with the next syntax:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Using SQLContext" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

import org.insightedge.spark.implicits.all._

val df = spark.read.grid[Person]

// Displays the content of the DataFrame to stdout
df.show()
</code></pre>
</div>

<div title="SQL syntax" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

spark.sql(
  s"""
     |create temporary table people
     |using org.apache.spark.sql.insightedge
     |options (class "${classOf[Person].getName}")
  """.stripMargin)

val df = spark.sql("select * from people")

// Displays the content of the DataFrame to stdout
df.show()
</code></pre>
</div>

<div title="Without imports" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

val df = spark.read
              .format("org.apache.spark.sql.insightedge")
              .option("class", classOf[Person].getName)
              .load()

// Displays the content of the DataFrame to stdout
df.show()
</code></pre>
</div>
</div>

<div class="tc-admon-note">
  
  <p>If you want to load DataFrame from <code>SpaceDocuments</code> written form a third-party application, please, refer to <a href="#loading-custom-spacedocuments">section below</a></p>
</div>

<h1 id="persisting-dataframes-to-data-grid">Persisting DataFrames to Data Grid</h1>

<p>To write a DataFrame use <code>DataFrame.write</code>. The content of the DataFrame is saved with a specified collection name.
The behavior of the write operation is controlled by the <code>SaveMode</code>.</p>

<p>Since DataFrames are no longer linked to object type, the content of the DataFrame is persisted by the specified collection name.
Thus, when saving a DataFrame to the Data Grid, you must provide a collection name, and when loading persisted DataFrame,
the same collection name must be used instead of object type.</p>

<p>To persist and load persisted DataFrame you can use the following syntax:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Simplified syntax" style="padding:10px"><pre><code class="language-scala">import org.insightedge.spark.implicits.all._

val spark: SparkSession // An existing SparkSession.
val df: DataFrame // An existing DataFrame

// Persist DataFrame into a collection named "people"
df.write.mode(SaveMode.Overwrite).grid("people")

// Load the DataFrame from the collection by name
val persisted = spark.read.grid("people")

// Displays the content of the DataFrame to stdout
persisted.show()
</code></pre>
</div>

<div title="Without imports" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.
val df: DataFrame // An existing DataFrame

df.write
    .format("org.apache.spark.sql.insightedge")
    .mode(SaveMode.Overwrite)
    .save("people")

val persisted = spark.read
    .format("org.apache.spark.sql.insightedge")
    .load("people")

// Displays the content of the DataFrame to stdout
persisted.show()
</code></pre>
</div>
</div>

<div class="tc-admon-note">
  
  <p>Nested properties are stored as <code>DocumentProperties</code> in Data Grid when DataFrame is persisted</p>
</div>

<p>Persisted DataFrames are shared among multiple Spark jobs and stay alive after the jobs are complete.</p>

<h1 id="nested-properties">Nested properties</h1>

<p>Let's enhance <code>Person</code> class with an additional property <code>Address</code> (that has some properties of it's own).</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">import org.insightedge.scala.annotation._
import scala.beans.BeanProperty

case class Person(
    @BeanProperty @SpaceId(autoGenerate = true) var id: String,
    @BeanProperty var name: String,
    @BeanProperty var age: Int,
    @BeanProperty var address: Address ) {
        
    def this() = this(null, null, -1, null) 
}

case class Address(city: String, state: String)
</code></pre>
</div>
</div>

<p>If you write some <code>Person</code> to a Data Grid, e.g. by persisting an RDD, and then load them as DataFrame,
you can see that DataFrame schema includes nested properties:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">import org.insightedge.spark.implicits.all._

val spark: SparkSession // An existing SparkSession.

val df = spark.read.grid[Person]

// Displays the schema of the DataFrame to stdout
df.printSchema()
</code></pre>
</div>
</div>

<p>This code will print the next schema:</p>

<pre><code>root
 |-- id: string (nullable = true)
 |-- name: string (nullable = true)
 |-- age: integer (nullable = false)
 |-- address: struct (nullable = true)
 |    |-- city: string (nullable = true)
 |    |-- state: string (nullable = true)
</code></pre>

<p>Nested properties can be accessed using dot-separated syntax, e.g. <code>address.city</code>. Here is an example of filtering by nested properties:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

val df = spark.read.grid[Person]
val countInBuffalo = df.filter(df("address.city") equalTo "Buffalo").count()

// Displays number of people from Buffalo
println(countInBuffalo)
</code></pre>
</div>
</div>

<p>You can also unwrap the nested properties, thus changing the DataFrame schema:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

spark.read.grid[Person].createOrReplaceTempView("people")

val df = spark.sql("select address.city as city, address.state as state from people")
val countInBuffalo = df.filter(df("city") equalTo "Buffalo").count()

// Displays the schema of the DataFrame to stdout
df.printSchema()

// Displays number of people from Buffalo
println(countInBuffalo)
</code></pre>
</div>
</div>

<p>This code will print the next DataFrame schema:</p>

<pre><code>root
 |-- city: string (nullable = true)
 |-- state: string (nullable = true)
</code></pre>

<div class="tc-admon-note">
  
  <p>When DataFrame is persisted, nested properties are stored as <code>DocumentProperties</code> in Data Grid</p>
</div>

<h1 id="controlling-spark-partitions">Controlling Spark partitions</h1>

<p>Similar to RDD in order to control the number of Spark partitions, set the <code>splitCount</code> option:</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">val spark: SparkSession // An existing SparkSession.

val df = spark.read.option("splitCount", "4").grid[Person]
</code></pre>
</div>
</div>

<p>The <code>splitCount</code> defines the number of Spark partitions per Data Grid partition. This feature is limited to <code>bucketed</code> grid model. Please, refer to <a href="./insightedge-modeling.htm/">Data Modeling</a> for more details.</p>

<h1 id="loading-custom-spacedocuments">Loading custom SpaceDocuments</h1>

<p>If you have a third-party application writing <code>SpaceDocuments</code> into the grid, you have to manually provide a schema for the DataFrame. Nested properties must be supplied with class metadata, so that DataFrame API can properly parse the <code>SpaceDocuments</code> (see the <code>address</code> field in the example below).</p>

<div class="easyui-tabs" plain="true" data-options=""><div title="Scala" style="padding:10px"><pre><code class="language-scala">import org.insightedge.spark.implicits.all._
import org.apache.spark.sql.types._

val addressType = StructType(Seq(
  StructField("state", StringType, nullable = true),
  StructField("city", StringType, nullable = true)
))

val schema = StructType(Seq(
  StructField("personId", StringType, nullable = false),
  StructField("name", StringType, nullable = true),
  StructField("surname", StringType, nullable = true),
  StructField("age", IntegerType, nullable = false),
  StructField("address", addressType, nullable = true, nestedClass[Address])
))

val spark: SparkSession // An existing SparkSession.

val df = spark.read.schema(schema).grid("people")
</code></pre>
</div>
</div>

</body>
</html>