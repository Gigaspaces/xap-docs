<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>User-Role Management</h1>
  <p>Customize user/role management to meet your application requirements</p>

<p>The <code>DirectoryManager</code> interface provides an API for managing users and roles. Implementing this interface is <span class="tc-bold">optional</span> - and is usually the case if you have an external tool that manages it for you.</p>

<p>From the <code>DirectoryManager</code> you can gain a <code>UserManager</code> interface and a <code>RoleManager</code> interface. Use the <code>UserManager</code> interface to create, delete, update <code>UserDetails</code> and the <code>RoleManager</code> interface to create, delete, update <code>RoleDetails</code>. This is just a logical separation - in reality you can choose how you want your users to be stored, and how you structure the one-to-many role to user relationship.</p>

<p>GigaSpaces security is not aware of the directory at all. As long as the authentication process manages to access the user storage, authenticate the user and return all its authorities.</p>

<p><span class="tc-bold">Sample usage of the <code>DirectoryManager</code> API</span></p>

<p>In the <a href="./securing-the-helloworld-example.htm/">Hello World example</a>, we presented a way to declare the users using the UI. It can also be done using the <code>DirectoryManager</code> API.</p>

<p>Using the API we would like to declare the following:</p>

<div class="tc-admon-note">
  
  <p>The <span class="tc-bold">helloProcessor</span> user will be granted <code>Take</code> access for <code>HelloObject</code> and <code>Write</code> access for <code>ProcessedHelloObject</code>.
The <span class="tc-bold">helloFeeder</span> user will be granted <code>Write</code> access for <code>HelloObject</code> and <code>Read</code> access for <code>ProcessedHelloObject</code>.</p>
</div>

<p>The GigaSpaces <code>User</code> is the default implementation of <code>UserDetails</code>. It accepts an array or a sequence of <code>Authority</code>-ies (<code>varargs</code>). Here we added the <code>ClassFilter</code> to restrict access to this specific class.</p>

<pre><code class="language-java">Properties securityProperties = new Properties();
SecurityManager securityManager = SecurityFactory.createSecurityManager(securityProperties);

DirectoryManager directoryManager = securityManager.createDirectoryManager(new User("admin", "admin"));
UserManager userManager = directoryManager.getUserManager();

userManager.createUser(new User("helloProcessor", "helloWorld",
        new SpaceAuthority(SpacePrivilege.TAKE, new ClassFilter("org.openspaces.example.helloworld.common.HelloObject")),
        new SpaceAuthority(SpacePrivilege.WRITE, new ClassFilter("org.openspaces.example.helloworld.common.HelloObject"))
));

userManager.createUser(new User("helloFeeder", "feedTheWorld",
        new SpaceAuthority(SpacePrivilege.WRITE, new ClassFilter("org.openspaces.example.helloworld.common.HelloObject")),
        new SpaceAuthority(SpacePrivilege.READ, new ClassFilter("org.openspaces.example.helloworld.common.HelloObject"))
));

directoryManager.close();
securityManager.close();
</code></pre>

</body>
</html>