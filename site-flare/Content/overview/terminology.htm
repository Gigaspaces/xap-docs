<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Terminology</h1>
  

<h1 id="basic-components">Basic Components</h1>

 <a id="Space">&#160;</a>

<h2 id="space">Space</h2>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/space.png" width="140" height="90" /></p>
</td>
<td style="width:70%;"><p>The GigaSpaces cache instance that holds data objects in memory.</p>
</td>
</tr></table>

 <a id="Execute-Read-Write-Take-and-Notify">&#160;</a>

<h2 id="execute-read-write-take-and-notify">Execute, Read, Write, Take and Notify</h2>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/operations.png"  /></p>
</td>
<td style="width:70%;"><p>A set of methods used to read, write, take, and register for notification on objects that are stored in the Space. Execute allows sending Tasks to be executed within the Space. Read and Take criteria can be specified via a query or a template (an example object).</p>
</td>
</tr></table>

 <a id="Processing">&#160;</a>

<h1 id="processing-unit">Processing Unit</h1>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/processing_unit.png" width="154" height="103" /></p>
</td>
<td style="width:70%;"><p>A combination of clients and/or an embedded Space instance. This is the fundamental unit of deployment in GigaSpaces XAP. The Processing Unit itself is typically deployed onto the <a href="#service-grid">Service Grid</a>. Once a Processing Unit is deployed, a <span class="tc-bold">Processing Unit instance</span> is the actual runtime entity.</p>
</td>
</tr></table>

<h2 id="processing-unit-configured-with-an-embedded-space">Processing Unit Configured with an Embedded Space</h2>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/PU_space.png" width="154" height="103" /></p>
</td>
<td style="width:70%;"><p>A deployable package that instantiates an embedded Space instance, also called a data grid instance. A set of embedded Space instances that run within the Processing Units typically form a <a href="#Data Grid">Data Grid</a>.</p>
</td>
</tr></table>

<h2 id="processing-unit-configured-with-one-or-more-services">Processing Unit Configured with One or More Services</h2>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/PU_services.png"  /></p>
</td>
<td style="width:70%;"><p>A deployable package containing one or more services. In the GigaSpaces context, it usually acts as a client that interacts with other Processing Units by utilizing the messaging capabilities of the Space.</p>
</td>
</tr></table>

<h2 id="processing-unit-configured-with-an-embedded-space-and-embedded-services">Processing Unit Configured with an Embedded Space and Embedded Services</h2>

<table class="tc-borderless"><tr><td style="width:30%;"><p><img src="../Resources/Static/attachment_files/overview/PU_spaces_services.png" width="154" height="103" /></p>
</td>
<td style="width:70%;"><p>A deployable, independent, scalable unit that is the building block of <a href="./space-based-architecture.htm/">Space-Based Architecture</a>. A client application (which can also be other Processing Units) write objects to the Space, and the Processing Unit that contains this Space consumes these objects or is notified about them and triggers related services.</p>
</td>
</tr></table>

<h1 id="data-grid">Data Grid</h1>

 <a id="Data">&#160;</a>

<h2 id="in-memory-data-grid-imdg">In-Memory Data Grid (IMDG)</h2>

<p>A set of Space instances, typically running within their respective processing unit instances. The space instances are connected to each other to form a space cluster. The relations between the spaces define the <a href="#Data Grid Topology">Data Grid Topology</a>.</p>

 <a id="Data">&#160;</a>

<h2 id="data-grid-topologies">Data Grid Topologies</h2>

 <a id="Partitioned">&#160;</a>

<h3 id="partitioned-data-grid">Partitioned Data Grid</h3>

<table class="tc-borderless"><tr><td style="width:40%;"><p><img src="../Resources/Static/attachment_files/overview/partitioned_data_grid.png"  /></p>
</td>
<td style="width:60%;"><p>Each Data Grid instance (partition) holds a different subset of the objects in the data grid. When the objects are written to this data grid, they are routed to the proper partition according to a predefined attribute in the object that acts as the <a href="#Routing">routing</a> index.</p>
</td>
</tr></table>

 <a id="Routing">&#160;</a>

<h3 id="routing">Routing</h3>

<table class="tc-borderless"><tr><td style="width:40%;"><p><img src="../Resources/Static/attachment_files/overview/routing.png"  /></p>
</td>
<td style="width:60%;"><p>The mechanism that is in charge of routing the objects into and out of the corresponding partitions. The routing is based on a designated attribute inside the objects that are written to the Space, called the <span class="tc-italic">Routing Index</span>.</p>
</td>
</tr></table>

 <a id="Primary">&#160;</a>

<h3 id="partitioned-data-grid-with-high-availability">Partitioned Data Grid with High Availability</h3>

<table class="tc-borderless"><tr><td style="width:45%;"><p><img src="../Resources/Static/attachment_files/overview/partitioned_data_grid_HA.png"  /></p>
</td>
<td style="width:55%;"><p>A <a href="#Partitioned Data Grid">partitioned data grid</a>, with one or more <a href="#Primary Backup Data Grid">backup</a> instances for each partition. Each data grid instance (partition) holds a different subset of the objects in the data grid, and replicates this subset to its backup instance/s.</p>
</td>
</tr></table>

<h1 id="runtime-components">Runtime Components</h1>

<h2 id="processing-unit-container">Processing Unit Container</h2>

 <a id="Processing">&#160;</a>

<p>A container that hosts a <a href="#Processing Unit">Processing Unit</a>. The Processing Unit can run only inside a hosting Processing Unit Container.</p>

<h2 id="types-of-processing-unit-containers">Types of Processing Unit Containers</h2>

<h3 id="integrated-processing-unit-container">Integrated Processing Unit Container</h3>

<p>A container that runs the Processing Unit inside an IDE (e.g. IntelliJ IDEA, Eclipse).</p>

 <a id="SGPUC">&#160;</a>

<h3 id="service-grid-processing-unit-container-sla-driven-container">Service Grid Processing Unit Container (SLA-Driven Container)</h3>

<p>A Processing Unit Container that runs within a <a href="#GSC">Grid Service Container</a>. It enables running the Processing Unit within a <a href="#service-grid">service grid</a>, which provides self-healing and SLA capabilities to components deployed on it.</p>

 <a id="Service">&#160;</a>

<h3 id="service-grid">Service Grid</h3>

<p>A set of <a href="#gsc">Grid Service Containers (GSCs)</a> managed by a <a href="#gsm">Grid Service Manager</a>. The containers host various deployments of <a href="#Processing Unit">Processing Units</a> and <a href="#Data Grid">data grids</a>.
Each container can be run on a separate physical machine.</p>

 <a id="GSC">&#160;</a>

<h3 id="grid-service-container-gsc">Grid Service Container (GSC)</h3>

<p>A <a href="#service-grid">service grid</a> component that hosts <a href="#processing-unit">Processing Unit</a> instances. A machine can run one or more <a href="#gsc">GSC</a> processes. Each GSC communicates with a manager component <a href="#gsm">GSM</a>. The GSC receives requests to start/stop a Processing Unit instance, and sends information about the machine that runs it (operating system, processor architecture, current memory and CPU stats), the software installed on it, and the status of Processing Unit instances currently running on it.</p>

 <a id="GSM">&#160;</a>

<h3 id="grid-service-manager-gsm">Grid Service Manager (GSM)</h3>

<p>The <a href="#gsm">GSM</a> is a <a href="#service-grid">service grid</a> component that manages a set of <a href="#gsc">Grid Service Containers (GSCs)</a>. A GSM has an API for deploying/undeploying Processing Units. When a GSM is instructed to deploy a Processing Unit, it finds an appropriate, available GSC and tells that GSC to run an instance of that Processing Unit. It then continuously monitors that Processing Unit instance to verify that it is alive, and that the SLA is not breached.</p>

</body>
</html>