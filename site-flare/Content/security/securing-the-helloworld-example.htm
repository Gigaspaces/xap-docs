<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>HelloWorld example</h1>
  

<p>If you are new to the <span class="tc-bold">Hello World</span> example, we suggest to first review the <a href="http://www.youtube.com/watch?v=I2s8jg_Gufs&amp;feature=relmfu" target="_blank" >Hello World screen cast</a>. With this page we provide a short overview of the example, and get you started with applying security aspects to it.</p>

<div class="tc-admon-note">
  
  <p>The example distribution can be found under <code>&lt;XAP root&gt;/examples/helloworld</code>.</p>
</div>

<h1 id="overview">Overview</h1>

<p>We have a processor bean that will process <code>HelloObjects</code> - it works with a polling container to talk to with a Space, all inside of a <code>Helloworld</code> Processing Unit. External to that process is the <code>Feeder</code> application, which gets a remote proxy to the Space and uses it to write objects (#1). The <code>HelloObject</code> written to the Space becomes interesting to the polling container. The polling container will take it out of the Space (#2), hand it to the <code>HelloWorld</code> processor bean for processing, and then write the results back to the Space (#3). In this case a <code>ProcessedHelloObject</code>. Later, our feeder application can read the results (#4) and print them out to the screen.</p>

<div class="tc-align-center"><p><img src="../Resources/Static/attachment_files/helloworld.png" alt="helloworld.png" /></p>
</div>

<h1 id="what-needs-to-be-secured">What needs to be secured?</h1>

<p>Obviously we want to protect the Space data (containing both <code>HelloObject</code> and <code>ProcessedHelloObject</code>). We need to first define the Space as secured. The processor beans' polling container needs to be granted <code>Take</code> access for <code>HelloObject</code> and <code>Write</code> access for <code>ProcessedHelloObject</code>. Secondly, the <code>Feeder</code> which gains a remote proxy to the Space, needs to be granted <code>Write</code> access for <code>HelloObject</code> and <code>Read</code> access for <code>ProcessedHelloObject</code>.</p>

<h1 id="securing-the-space">Securing the Space</h1>

<p>Lets define a secured space in <code>hello-processor/META-INF/spring/pu.xml</code> by adding the <code>secured</code> namespace property. This can also be accomplished by adding the <code>secured</code> Space URL property.</p>

<pre><code class="language-java">&lt;!-- pu.xml --&gt;
&lt;os-core:embedded-space id="space" space-name="processorSpace"&gt;
   &lt;os-core:security secured="true"/&gt;
&lt;/os-core:embedded-space&gt;
</code></pre>

<h1 id="granting-access-to-the-embedded-polling-container">Granting access to the embedded polling container</h1>

<p>Accessing the secured space requires a <span class="tc-italic">principal</span>. In this case the <span class="tc-italic">principal</span> is the processor beans' polling container.
Lets assume the principals' credentials are: <code>username</code>="helloProcessor" and <code>password</code>="helloWorld".</p>

<p>There are two options for providing the principal credentials. The first, is by adding the credentials in <code>pu.xml</code>. The drawback is that the credentials are exposed. The second, which is preferred, is during deployment of the processing unit.</p>

<pre><code class="language-xml">&lt;os-core:embedded-space id="space" space-name="processorSpace?secured"&gt;
    &lt;os-core:security username="helloProcessor" password="helloWorld"/&gt;
&lt;/os-core:embedded-space&gt;
</code></pre>

<h1 id="granting-access-to-the-feeder">Granting access to the Feeder</h1>

<p>The <code>Feeder</code> in this example is not a processing unit. It is just an external process acquiring a remote proxy to the Space.
Lets take a look at the <code>Feeder</code> constructor.</p>

<pre><code class="language-java">public Feeder(String url){
  IJSpace space = new UrlSpaceConfigurer(url).space();
  this.gigaSpace = new GigaSpaceConfigurer(space).gigaSpace();
}
</code></pre>

<p>The feeder needs to be granted access for operations it will perform on the remote secured Space. In this case the feeder is the <span class="tc-italic">principal</span>. Lets assume the principals' credentials are: <code>username</code>="helloFeeder" and <code>password</code>="feedTheWorld".</p>

<pre><code class="language-java">public Feeder(String url){
  IJSpace space = new UrlSpaceConfigurer(url).userDetails("helloFeeder", "feedTheWorld").space();
  this.gigaSpace = new GigaSpaceConfigurer(space).gigaSpace();
}
</code></pre>

<h1 id="protecting-user-password">Protecting User/Password</h1>

<p>With production environment the user/password used by the application (for database or space access) should be passed into the application at the deploy time. This will make sure the user/password will never be stored on file and be accessible.</p>

<pre><code class="language-xml">
&lt;os-core:embedded-space id="space" space-name="processorSpace"&gt;
&lt;/os-core:embedded-space&gt;

Using the CLI deploy command supply username and password using the -user and -password.
&gt; gs deploy -secured -user testing -password 1234 myPU.jar
</code></pre>

<p>Another option, is to set the security username/password as variables at the pu.xml and inject them - for example, via a deploy property:</p>

<pre><code class="language-xml">&lt;os-core:embedded-space id="space" space-name="processorSpace"&gt;
    &lt;os-core:security username="${myusername}" password="${mypassword}"/&gt;
&lt;/os-core:embedded-space&gt;

Using the CLI deploy command embed the username and password matching the placeholders given in the pu.xml

&gt; gs deploy -properties embed://myusername=testing;mypassword=1234 myPU.jar
</code></pre>

<h1 id="declaring-the-principals">Declaring the principals</h1>

<p>Managing the users and their authorities can either be done using the UI or API.</p>

<p>We have two users to declare - "helloProcessor" and the other "helloFeeder".
The "helloProcessor" user will be granted <code>Take</code> access for <code>HelloObject</code> and <code>Write</code> access for <code>ProcessedHelloObject</code>.
The "helloFeeder" user will be granted <code>Write</code> access for <code>HelloObject</code> and <code>Read</code> access for <code>ProcessedHelloObject</code></p>

<div class="tc-admon-note">
  <p class="tc-admon-title">Some implementation notes: </p>
  <ul>
<li>The <code>ProcessedHelloObject</code> is fictive. Actually the <code>Feeder</code> waits for <code>HelloObject</code> template matching the "Hello World !!" String.</li>
<li>The <code>HelloObject</code> was replaced by a <code>Message</code> Object in the products example. Thus the actual class that should be granted privileges for is <code>org.openspaces.example.helloworld.common.Message</code>.</li>
</ul>
</div>

<p>Lets look at how easily it can be using the <a href="../admin/gigaspaces-management-center-ui-security.htm/">GigaSpaces Management Center (UI) Security</a></p>

<p><img src="../Resources/Static/attachment_files/helloWorldUsers.png" alt="helloWorldUsers.png" /></p>

<h1 id="running-the-example">Running the Example</h1>

<p>There are a couple of deployment options. For example deploying using the ant build script or the UI.</p>

<div class="tc-admon-note">
  
  <p>To simplify this example we will assume that the Service Grid components are <span class="tc-bold">not</span> secured.</p>
</div>

<ol>
<li>Start a GSM</li>
<li>Start a GSC</li>
<li>Run the build <code>deploy-processor</code> target</li>
<li>Run the build <code>run-feeder</code> target</li>
</ol>

<h1 id="secured-service-grid">Secured Service Grid</h1>

<p>To complete this example, we will give a brief overview of what needs to be done to deploy into a secured Service Grid.</p>

<p>In a secured Service Grid, the GSM and GSC are secured. This means that in order to deploy, you must have <code>Provision PU</code> privileges. Declare another principal with <code>Provision PU</code>, that will be used for deploying.</p>

<p>Using the UI, <span class="tc-italic">Login</span> with this principals' credentials, and open the deployment wizard to deploy the <code>processor</code>.
Now, all that is left is to run the feeder as an external application.</p>

</body>
</html>