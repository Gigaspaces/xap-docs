<?xml version="1.0" encoding="utf-8"?>
<html MadCap:sourceDocument="C:\BU individual topics\kubernetes-wan-gateway-before-sme-changes-20-may-2020.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
    </head>
    <body>
        <h1 class="tc-pagetitle">Multi-Region Replication in Kubernetes</h1>
        <p>
			For implementation examples, see <a href="https://github.com/Gigaspaces/solution-hub/tree/master/wan-gateway-kubernetes">https://github.com/Gigaspaces/solution-hub/tree/master/wan-gateway-kubernetes</a>.
		</p>
        <p>&#160;</p>
        <p>You can implement multi-region replication in Kubernetes by deploying a <MadCap:variable name="General.ProductNameXAP" /> WAN&#160;gateway. The Kubernetes-based WAN gateway has all the functionality of the service-grid based WAN gateway, and provides multi-region replication for fast and efficient disaster recovery. </p>
        <p>This topic describes how to set up a WAN&#160;gateway for a <MadCap:variable name="General.ProductNameXAP" /> environment in cloud-based Kubernetes clusters. You have to create two clusters, one for each region that will host <MadCap:variable name="General.ProductNameXAP" />, deploy <MadCap:variable name="General.ProductNameXAP" /> on each cluster, and then deploy a WAN gateway for each region. </p>
        <div class="tc-admon-note" MadCap:conditions="Default.DoNotShow">
            <p>This topic assumes knowledge of how to set up a WAN&#160;gateway in <MadCap:variable name="General.ProductNameXAP" />. If you aren't familiar with how to configure a WAN gateway, see the <MadCap:xref href="../dev-java/multi-site-replication-overview.html">Multi-Region Replication for Disaster Recovery</MadCap:xref> section of the developer guide before you continue with the below procedure.</p>
            <p>This topic also assumes knowledge of how to install <MadCap:variable name="General.ProductNameXAP" /> in a Kubernetes environment. For more information, see the <MadCap:xref href="../admin/kubernetes-data-grid.html">Getting Started with GigaSpaces in Kubernetes</MadCap:xref> topic in the Orchestration section of the administration guide.</p>
        </div>
        <h1>Setting Up the WAN Gateway</h1>
        <p>When defining a <MadCap:variable name="General.ProductNameXAP" /> WAN&#160;gateway for deployment in Kubernetes, you should always set it up in the following order: </p>
        <ol>
            <li>Manager for each geographical zone</li>
            <li>Space for each geographical zone</li>
            <li>WAN gateway for each geographical zone, allowing remote lrmi</li>
        </ol>
        <p>The procedure described in this topic creates a WAN&#160;gateway environment for two clusters, one located geographically in the U.S. and the other in Germany. You will need the <MadCap:variable name="General.ProductNameXAP" /> Helm charts, and pu.xml files for the delegator, sink, and WAN gateway components.</p>
        <div class="tc-align-center">
            <p>
                <img src="../Resources/Static/attachment_files/kubernetes/wan-gateway.png" class="tc-picture100" />
            </p>
        </div>
        <h2>Initializing Helm</h2>
        <div class="tc-admon-note">
            <p>Helm must be installed before you download the <MadCap:variable name="General.ProductNameXAP" /> Helm chart.</p>
        </div>
        <p class="tc-todo" MadCap:conditions="Version.15-5-died">To deploy the Helm Tiller service, type the following command:</p><pre MadCap:conditions="Version.15-5-died" xml:space="preserve"><code class="language-bash">helm init --service-account tiller</code></pre>
        <div MadCap:conditions="Version.15-5-born">
            <p class="tc-todo">For Helm 2, to deploy the Helm Tiller service, type the following command:</p><pre xml:space="preserve"><code class="language-bash">helm init --service-account tiller</code></pre>
        </div>
        <h2>Installing the <MadCap:variable name="General.ProductNameXAP" /> Manager per Geographical Site</h2>
        <p>The Manager is always installed first, followed by the service(s) that it will manage. </p>
        <p class="tc-todo">To install the Manager:</p>
        <ol>
            <li>
                <p>Fetch the GigaSpaces Helm Charts from the GigaSpaces Repository. </p>
                <h3>Fetching the GigaSpaces Helm Charts from the GigaSpaces Repository</h3>
                <p /><p MadCap:conditions="Version.15-5-born" /><div class="easyui-tabs" plain="true">
                            <div title="Helm 3">
                                <div title="Helm 2">
                                    <p /><pre xml:space="preserve"><code class="language-bash">helm pull gigaspaces/insightedge --version=<MadCap:variable name="Versions.product-version-long" /> --untar </code></pre>
                                    </div>
                            </div>
                            <div title="Helm 2">
                                <p /><pre xml:space="preserve"><code class="language-bash">helm fetch gigaspaces/insightedge --version=<MadCap:variable name="Versions.product-version-long" /> --untar </code></pre>
                                </div>
                        </div>
                    
                    <div title="Helm 2" MadCap:conditions="Version.15-5-died">
                        <p /><pre xml:space="preserve"><code class="language-bash">helm fetch gigaspaces/insightedge --version=<MadCap:variable name="Versions.product-version-long" /> --untar </code></pre>
                        </div>
                </li>
            <li>
                <p>You can use the default configuration to install the Manager for each geographical location. Use the following command to install a Manager for the U.S. location:</p>
                <p /><p MadCap:conditions="Version.15-5-born" /><div class="easyui-tabs" plain="true">
                            <div title="Helm 3">
                                <p /><pre xml:space="preserve"><code>helm install usmanager gigaspaces/xap-manager --version=<MadCap:variable name="Versions.product-version-long" /> --namespace gigaspaces-us</code></pre>
                                </div>
                            <div title="Helm 2">
                                <p /><pre xml:space="preserve"><code>helm install gigaspaces/xap-manager --name usmanager --version=<MadCap:variable name="Versions.product-version-long" />--namespace gigaspaces-us </code></pre>
                                </div>
                        </div>
                    
                    <div title="Helm 2" MadCap:conditions="Version.15-5-died">
                        <p /><pre xml:space="preserve"><code>helm install gigaspaces/xap-manager --name usmanager --version=<MadCap:variable name="Versions.product-version-long" />--namespace gigaspaces-us</code></pre>
                        </div>
                
                <p>&#160;</p>
            </li>
            <li>Repeat step 2 for the second geographical location, using for example name of <code>germanymanager</code> and namespace of <code>gigaspaces-germany</code>.</li>
        </ol>
        <div class="tc-admon-note">
            <p>To check the status of the host and services (to ensure that the Managers have been installed properly), use the following commands:</p><code class="language-bash">kubectl get services -n gigaspaces-us</code>
            <p><code class="language-bash">kubectl get services -n gigaspaces-germany</code>
            </p>
            <p>An example of kubectl output is shown below:</p>
            <p>
                <img src="../Resources/Static/attachment_files/kubectl get services example.jpg" />
            </p>
        </div>
        <h2>Installing the <MadCap:variable name="General.ProductNameXAP" /> Space Service</h2>
        <p>The next step is to install a Space service (Processing Unit) for each geographical site, which is defined in the service JAR as described in <MadCap:xref href="../dev-java/multi-site-replication-overview.html">Multi-Region Replication for Disaster Recovery</MadCap:xref>. It is important to verify that all of the WAN gateway-related properties have been configured correctly for each geographical location. For example, see the following property set for the U.S. cluster.
			
			</p>
        <div class="tc-admon-note">
            <p>For example configurations, see <a href="https://github.com/Gigaspaces/solution-hub/tree/master/wan-gateway-kubernetes">https://github.com/Gigaspaces/solution-hub/tree/master/wan-gateway-kubernetes</a>.</p>
        </div><pre xml:space="preserve"><code class="language-xml">&lt;os-core:embedded-space id="space" space-name="usSpace" gateway-targets="gatewayTargets"/&gt;
    &lt;os-gateway:targets id="gatewayTargets"
      local-gateway-name="us" bulk-size="1000"
      max-redo-log-capacity="1000000"&gt;
      &lt;os-gateway:target name="germany" /&gt;
    &lt;/os-gateway:targets&gt;</code> </pre>
        <p>For more information about defining the service JAR, refer to <MadCap:xref href="../dev-java/multi-site-replication-overview.html#configuring-a-space-with-gateway-targets">Configuring a Space With Gateway Targets</MadCap:xref>.</p>
        <h2>Installing the WAN Gateway Service</h2>
        <p>Before you install the Helm chart for the <MadCap:variable name="General.ProductNameXAP" /> WAN gateway, you need to update it with the details that define the zone and access points (public IP&#160;addresses for the Space services), so that the delegator and sink are able to communicate and replicate data across the network.</p>
        <p class="tc-todo">To configure the WAN&#160;gateway Helm chart:</p>
        <ol>
            <li>
                <p>Edit the Helm chart as shown in the following snippet from the Helm chart. This example defines the zone and the designates the ports that will be used for communication (the discovery port is the default port):
					</p><pre xml:space="preserve"><code class="language-xml">-Dcom.gs.zones=US
-Dcom.sun.jini.reggie.initialUnicastDiscoveryPort=4174
-Dcom.gigaspaces.start.httpPort=9713
-Dcom.gigaspaces.system.registryPort=10298</code></pre>
                <p>After updating the JAR&#160;with the Space public IP&#160;addresses for both clusters, you can deploy the WAN&#160;gateways, which also must have the LRMI enabled. For example, type the following command to deploy the WAN gateway for the U.S. site.</p>
                <p /><p MadCap:conditions="Version.15-5-born" /><div class="easyui-tabs" plain="true">
                            <div title="Helm 3">
                                <p /><pre xml:space="preserve"><code>helm install wangateway-us insightedge-pu --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                                </div>
                            <div title="Helm 2">
                                <p /><pre xml:space="preserve"><code>helm install insightedge-pu --name wangateway-us --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                                </div>
                        </div>
                    
                    <div title="Helm 2" MadCap:conditions="Version.15-5-died"><pre xml:space="preserve"><code>helm install insightedge-pu --name wangateway-us --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                    </div>
                </li>
            <li>
                <p>Configure the properties for the WAN&#160;gateway in the JAR&#160;file, which override the property placeholders under the <code>gatewayLookups</code> section of the Helm chart. 
				For example, to configure the U.S. properties, you can set the following. </p>
                <div class="tc-admon-important">
                    <p>The host and discovery port are the host and ports exposed by Kubernetes in the Helm manager install.
			</p>
                </div><pre xml:space="preserve"><code>local-gateway-name=us
local-spaceUrl=jini://*/*/usSpace
local-lookup-host=&lt;us-host&gt;
local-lookup-port=4174
local-communication-port=8200
remote-gateway-name=germany
remote-lookup-host=&lt;germany-host&gt;
remote-lookup-port=4174
remote-communication-port=8200</code></pre>
            </li>
            <li>
                <p>After updating the JAR&#160;with the Space public IP&#160;addresses for both clusters, you can deploy the WAN&#160;gateways, which also must have the LRMI enabled. For example, type the following command to deploy the WAN gateway for the U.S. site.</p>
                <p /><p MadCap:conditions="Version.15-5-born" /><div class="easyui-tabs" plain="true">
                            <div title="Helm 3">
                                <p /><pre xml:space="preserve"><code>helm install wangateway-us insightedge-pu --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                                </div>
                            <div title="Helm 2">
                                <p /><pre xml:space="preserve"><code>helm install insightedge-pu --name wangateway-us --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                                </div>
                        </div>
                    
                    <div title="Helm 2" MadCap:conditions="Version.15-5-died"><pre xml:space="preserve"><code>helm install insightedge-pu --name wangateway-us --set manager.name=usmanager,resourceUrl=&lt;path to WAN gateway pu JAR&gt;,service.lrmi.enabled=true</code></pre>
                    </div>
                </li>
            <li>Repeat step 3 for the second geographical location.</li>
        </ol>
        <div class="tc-admon-attention">
            <p>If you have to take down a Space and then redeploy it, the public IP&#160;address will change. The WAN&#160;gateway service JAR&#160;must be updated accordingly.</p>
        </div>
        <div class="tc-admon-note">
            <p>Enable LRMI as follows:</p><code class="language-bash">-service.lrmi.enabled=true</code>
        </div>
        <h1>Testing and Monitoring the WAN&#160;Gateway</h1>
        <p>To test whether your data is replicating between your clusters, you can use a Java client or Apache Zeppelin to write data to the source and then query the target.</p>
        <p>To see information about your WAN&#160;gateways, you can view the system logs. </p>
        <p>&#160;</p>
        <p>&#160;</p>
    </body>
</html>