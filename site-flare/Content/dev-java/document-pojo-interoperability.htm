<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Interoperability</h1>
  

<p>XAP offers interoperability between documents and POJOs via the Space - it is possible to write POJOs and read them back as documents, and vice versa. This is usually useful in scenarios requiring reading and/or manipulating POJO objects without loading the concrete Java classes.</p>

<div class="tc-align-center"><p><img src="../Resources/Static/attachment_files/document_arch2.jpg" width="574" height="280" /></p>
</div>

<div class="tc-admon-tip">
  
  <p>In previous releases the <code>ExternalEntry</code> class was used to achieve this functionality. Starting with 8.0, the <code>SpaceDocument</code> class should be used to accomplish these needs in a simpler and safer manner, whereas <code>ExternalEntry</code> has been deprecated and should no longer be used.</p>
</div>

<h1 id="requirements">Requirements</h1>

<p>When working with documents, the user is in charge of creating and registering the Space type descriptor manually before interacting with the document types. When working with POJOs, the system implicitly generates a Space type descriptor for the POJO's class using annotations or <code>gs.xml</code> files when the class is used for the first time. In order to inter-operate, the same type descriptor should be used for both POJOs and documents.</p>

<p>If the POJO's class is in the application's classpath, or the POJO is already registered in the Space, there's no need to register it again - the application will retrieve it automatically when it is used for the first time. For example:</p>

<pre><code class="language-java">// Create a document template using the POJO class name:
SpaceDocument template = new SpaceDocument(MyPojo.class.getName());
// Count all entries matching the template:
int count = gigaSpace.count(template);
</code></pre>

<p>If the POJO's class is not available in the classpath or in the data grid, the application throws an exception indicating that there is no type descriptor registered for the specified type. In this case, it is possible to manually create a matching type descriptor using the <code>SpaceTypeDescriptorBuilder</code> and register it in the Space. However, this is not recommended because it essentially requires duplicating all the POJO settings and maintaining them if the POJO changes.</p>

<h1 id="query-result-type">Query Result Type</h1>

<p>When no interoperability is involved this is a trivial matter - Querying a POJO type returns POJOs, querying a document type returns documents.</p>

<p>When we want to mix and match, we need semantics to determine to query result type - POJO or document.</p>

<h2 id="template-query">Template Query</h2>

<p>Template query result types are determined by the template class - if the template is an instance of a <code>SpaceDocument</code>, the results will be documents, otherwise they will be POJOs.</p>

<p>For example:</p>

<pre><code class="language-java">// Read all product entries as POJOs:
Product[] objects = gigaSpace.readMultiple(new Product(), Integer.MAX_VALUE);
// Read all product entries as Documents:
SpaceDocument[] documents = gigaSpace.readMultiple(
    new SpaceDocument(Product.class.getName()), Integer.MAX_VALUE);
</code></pre>

<h3 id="sql-query">SQL Query</h3>

<p>The <code>SQLQuery</code> class has been enhanced with a <code>QueryResultType</code> parameter. The following options are available:</p>

<ul>
<li><code>OBJECT</code> - Return java Object(s) (POJO).</li>
<li><code>DOCUMENT</code> - Return space document(s).</li>
<li><code>DEFAULT</code> - If the type is registered with a concrete java class, return an Object. Otherwise, return a document. This is the default behavior.</li>
</ul>

<p>For example:</p>

<pre><code class="language-java">// Read a POJO using an SQL query - same as always:
Product pojo = gigaSpace.read(
    new SQLQuery&lt;Product&gt;(Product.class, "name='Dynamite'"));

// Read a document using an SQLQuery when there's no
// compatible POJO - no need to specify query result type:
SpaceDocument document = gigaSpace.read(
    new SQLQuery&lt;SpaceDocument&gt;("Product", "name='Dynamite'"));

// Read a documnet using an SQLQuery when there is a
// compatible POJO - explicitly specify query result type:
SpaceDocument document = gigaSpace.read(
    new SQLQuery&lt;SpaceDocument&gt;(Product.class.getName(),
        "name='Dynamite'", QueryResultType.DOCUMENT));
</code></pre>

<p>This strategy both preserves backwards compatibility and simplifies non-interoperability scenarios, which are more common than interoperability scenarios.</p>

<h3 id="id-based-query">ID-Based Query</h3>

<p>In order to support ID queries for documents, the <code>IdQuery</code> class has been introduced, which encapsulates the type, ID, routing and a <code>QueryResultType</code>. New <code>GigaSpace</code> signatures have been added for <code>readById</code>, <code>readIfExistsById</code>, <code>takeById</code>, <code>takeIfExistsById</code>. The result type is determined by the <code>QueryResultType</code>, similar to <code>SQLQuery</code>.</p>

<p>For example:</p>

<pre><code class="language-java">// Read a POJO by id - same as always:
Product pojo = gigaSpace.readById(new IdQuery&lt;Product&gt;(Product.class, 7));

// Read a document by id when there's no
// compatible POJO - no need to specify query result type:
SpaceDocument document = gigaSpace.readById(
    new IdQuery&lt;SpaceDocument&gt;("Product", 7));

// Read a document by id when there is
// a compatible POJO - explicitly specify query result type:
SpaceDocument document = gigaSpace.readById(
    new IdQuery&lt;SpaceDocument&gt;(Product.class.getName(), 7,
        QueryResultType.DOCUMENT));
</code></pre>

<p>Respectively, to support multiple ID queries, <code>IdsQuery</code> was also introduced, with new signatures for <code>readByIds</code> and <code>takeByIds</code>. For example:</p>

<pre><code class="language-java">Object[] ids = new Object[] {7, 8, 9};
// Read POJOs by ids - same as always:
Product[] pojos = gigaSpace.readByIds(
    new IdsQuery&lt;Product&gt;(Product.class, ids)).getResultsArray();

// Read documents by ids when there's no
// compatible POJO - no need to specify query result type:
SpaceDocument[] documents = gigaSpace.readByIds(
    new IdsQuery&lt;SpaceDocument&gt;("Product", ids)).getResultsArray();

// Read documents by ids when there is a
//  compatible POJO - explicitly specify query result type:
SpaceDocument[] documents = gigaSpace.readByIds(
    new IdsQuery&lt;SpaceDocument&gt;(Product.class.getName(),
        ids, QueryResultType.DOCUMENT)).getResultsArray();
</code></pre>

<div class="tc-admon-note">
  
  <p></p>
</div>

</body>
</html>