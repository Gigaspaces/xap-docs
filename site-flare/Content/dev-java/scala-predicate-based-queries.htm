<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Predicate-Based Queries</h1>
  

<p>Support for predicate based queries on the <code>GigaSpace</code> proxy has been in added. This support is based on the new macros feature introduced in Scala 2.10.  Each predicate based query is transformed during compilation into an equivalent <a href="query-sql.htm">SQLQuery</a>.</p>

<h1 id="usage">Usage</h1>

<p>To use predicate based queries, import <code>import org.openspaces.scala.core.ScalaGigaSpacesImplicits._</code> into scope. Then call the <code>predicate</code> method on the <code>GigaSpace</code> instance as demonstrated:</p>

<pre><code class="language-scala">/* Import GigaSpace implicits into scope */
import org.openspaces.scala.core.ScalaGigaSpacesImplicits._

/* implicit conversion on gigaspace returns a wrapper class with predicate based query methods */
val predicateGigaSpace = gigaSpace.predicate
</code></pre>

<h1 id="supported-queries">Supported Queries</h1>

<h2 id="example-data-class">Example data class</h2>

<p>For the purpose of demonstration, we will use the following example data class</p>

<pre><code class="language-scala">case class Person @SpaceClassConstructor() (

  @BeanProperty
  @SpaceId
  id: String = null,

  @BeanProperty
  name: String = null,

  @BeanProperty
  @SpaceProperty(nullValue = "-1")
  @SpaceIndex(`type` = SpaceIndexType.ORDERED)
  height: Int = -1,

  @BeanProperty
  birthday: Date = null,

  @BeanProperty
  son: Person = null

)
</code></pre>

<h2 id="translations">Translations</h2>

<table>
<thead>
<tr>
<th align="left">Predicate Query</th>
<th align="left">Translated SQL Query</th>
</tr>
</thead>

<tbody>
<tr>
<td align="left"><code>==</code> <br/> predicateGigaSpace read { person: Person =&gt; <br/> person.name == "john"}</td>
<td align="left"><code>=</code> <br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "name = ?", "john")</td>
</tr>

<tr>
<td align="left"><code>!=</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.name != "john"}</td>
<td align="left"><code>&lt;&gt;</code> <br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "name &lt;&gt; ?", "john")</td>
</tr>

<tr>
<td align="left"><code>&gt;</code>  <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.height &gt; 10}</td>
<td align="left"><code>&gt;</code> <br/>gigaSpace read new SQLQuery(classOf[Person], <br/> "height &gt; ?", 10: Integer)</td>
</tr>

<tr>
<td align="left"><code>&gt;=</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.height &gt;= 10}</td>
<td align="left"><code>&gt;=</code> <br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "height &gt;= ?", 10: Integer)</td>
</tr>

<tr>
<td align="left"><code>&lt;</code>  <br/> predicateGigaSpace read { person: Person =&gt;<br/> person.height &lt; 10}</td>
<td align="left"><code>&lt;</code> <br/>  gigaSpace read new SQLQuery(classOf[Person], <br/> "height &lt; ?", 10: Integer)</td>
</tr>

<tr>
<td align="left"><code>&lt;=</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.height &lt;= 10}</td>
<td align="left"><code>&lt;=</code><br/>  gigaSpace read new SQLQuery(classOf[Person], <br/>  "height &lt;= ?", 10: Integer)</td>
</tr>

<tr>
<td align="left"><code>&amp;&amp;</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.height &gt; 10 &amp;&amp; person.height &lt; 100<br/>}</td>
<td align="left"><code>AND</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "( height &gt; ? ) AND ( height &lt; ? )", <br/>  10: Integer, 100: Integer)</td>
</tr>

<tr>
<td align="left">`</td>
<td align="left"></td>
</tr>

<tr>
<td align="left"><code>eq null</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.name eq null}</td>
<td align="left"><code>is null</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "name is null", QueryResultType.OBJECT )</td>
</tr>

<tr>
<td align="left"><code>ne null</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.name ne null}</td>
<td align="left"><code>is NOT null</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "name is NOT null", QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>like</code> <br/>//  Implicit conversion on java.lang.String<br/>predicateGigaSpace read { person: Person =&gt;<br/>  person.name like "j%"}</td>
<td align="left"><code>like</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "name like "j%'", QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>notLike</code> <br/>predicateGigaSpace read { person: Person =&gt;<br/>  person.name notLike "j%"}</td>
<td align="left"><code>NOT like</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "name NOT like "j%'", QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>rlike</code> <br/>predicateGigaSpace read { person: Person =&gt;<br/>  person.name rlike "j.*"}</td>
<td align="left"><code>rlike</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "name rlike "j.*'", QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>Nested Queries</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/> person.son.name == "dave"}</td>
<td align="left"><br/>gigaSpace read new SQLQuery(classOf[Person], <br/> "son.name = ?", "dave")</td>
</tr>

<tr>
<td align="left"><code>Date</code> <br/>// implicit conversion on java.util.Date<br/>predicateGigaSpace read { person: Person =&gt;<br/>  person.birthday &lt; janesBirthday}</td>
<td align="left"><br/>gigaSpace read new SQLQuery(classOf[Person], <br/>  "birthday &lt; ?", janesBirthday)</td>
</tr>

<tr>
<td align="left"><code>Date</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/> person.birthday &lt;= janesBirthday}</td>
<td align="left"><br/>gigaSpace read new SQLQuery(classOf[Person], <br/> "birthday &lt;= ?", janesBirthday)</td>
</tr>

<tr>
<td align="left"><code>Date</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.birthday &gt; janesBirthday}</td>
<td align="left"><br/>gigaSpace read new SQLQuery(classOf[Person], <br/> "birthday &gt; ?", janesBirthday)</td>
</tr>

<tr>
<td align="left"><code>Date</code> <br/> predicateGigaSpace read { person: Person =&gt;<br/>  person.birthday &gt;= janesBirthday}</td>
<td align="left"><br/>gigaSpace read new SQLQuery(classOf[Person], <br/> "birthday &gt;= ?", janesBirthday)</td>
</tr>

<tr>
<td align="left"><code>select</code> <br/>// select is imported into scope<br/>predicateGigaSpace read { person: Person =&gt;<br/> select(person.name, person.birthday)<br/> person.id == someId}</td>
<td align="left"><br/>setProjections gigaSpace read new SQLQuery(classOf[Person], <br/> "id = ?", someId<br/>).setProjections("name, birthday")</td>
</tr>

<tr>
<td align="left"><code>orderBy</code><br/>// orderBy is imported into scope<br/>predicateGigaSpace read { person: Person =&gt;<br/> orderBy(person.birthday)<br/>  person.nickName eq null}</td>
<td align="left"><code>ORDER BY</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "nickName is null ORDER BY birthday", <br/>  QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>orderBy().ascending</code><br/>predicateGigaSpace read { person: Person =&gt;<br/>  orderBy(person.birthday)==.ascending<br/> person.nickName eq null}</td>
<td align="left"><code>ORDER BY ... ASC</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/> "nickName is null ORDER BY birthday ASC", <br/>  QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>orderBy().descending</code><br/>predicateGigaSpace read { person: Person =&gt;<br/>  orderBy(person.birthday).descending<br/> person.nickName eq null}</td>
<td align="left"><code>ORDER BY ... DESC</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "nickName is null ORDER BY birthday DESC", <br/>  QueryResultType.OBJECT)</td>
</tr>

<tr>
<td align="left"><code>groupBy</code><br/>// groupBy is imported into scope<br/>predicateGigaSpace read { person: Person =&gt;<br/>  groupBy(person.birthday)<br/>  person.nickName eq null}</td>
<td align="left"><code>GROUP BY</code><br/> gigaSpace read new SQLQuery(classOf[Person], <br/>  "nickName is null GROUP BY birthday", <br/>  QueryResultType.OBJECT)</td>
</tr>
</tbody>
</table>

</body>
</html>