<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
<head></head>
<body>
<h1>Reference Implementation</h1>
  

<p>The reference implementation uses MongoDB as the storage for the UserDetails.
It uses Morphia to abstract the UserDetailsDAO that is stored.</p>

<h2 id="security-properties-file">Security Properties file</h2>

<p>Create a <code>security.properties file</code> at the default location <code>&lt;XAP root&gt;/config/security/security.properties</code>
It should include a SecurityManager implementation class and other properties configurable by the implementation.</p>

<pre><code class="language-java">com.gs.security.security-manager.class = com.mycompany.MyCustomSecurityManager
com.mycompany.mongodb.host = localhost
com.mycompany.mongodb.port = 27017
com.mycompany.mongodb.databsebName = myDB
</code></pre>

<h2 id="implementing-securitymanager">Implementing SecurityManager</h2>

<p>The implementation utilizes the properties file to configure the connection to MongoDB.
Calls to <code>authenticate</code> are triggered once per user login operation. The authentication
is done against the user details stored in the DB.</p>

<pre><code class="language-java">public static class MyCustomSecurityManager implements SecurityManager {

    private MongoClient mongo;
    private UserDetailsDAO userDetailsDAO;

    public void init(Properties properties) throws SecurityException {

       // Access a property form the properties file to configure this implementation
       String host = properties.getProperty("com.mycompany.mongodb.host");
       String port = properties.getProperty("com.mycompany.mongodb.port");
       String dbName = properties.getProperty("com.mycompany.mongodb.databsebName");

       // Connect to the db, use org.mongodb.morphia.Morphia for mapping
       MongoClient mongo = new MongoClient(host, Integer.parseInt(port));
       userDetailsDAO = new UserDetailsDAO(morphia, mongoClient, dbName);
       ...
    }

    public Authentication authenticate(UserDetails userDetails) 
        throws AuthenticationException {

        UserDetailsDAO user = userDetailsDAO.findOne( 
            userDetailsDAO.createIdQuery(userDetails.getUsername()));

        if (user == null) {
            throw new AuthenticationException("user not found");
        }

        if (user.getPassword().equals(userDetails.getPassword())) {

            // Populate the returned details with the authorities extracted 
            // from the DB (user.getAuthorities()) and return an Authentication 
            // object with these details.
            UserDetails populatedDetails = new User(user.getUsername(), 
                                                    user.getPassword(), 
                                                    user.getAuthorities());

            return new Authentication(populatedDetails);
        } else {
            throw new AuthenticationException("access denied");
        }
    }

    public DirectoryManager createDirectoryManager(UserDetails userDetails) 
      throws AuthenticationException, AccessDeniedException {
        return null; //ignore or throw DirectoryAccessDeniedException
    }

    public void close() {
        mongo.close();
    }
}
</code></pre>

<h2 id="packaging-and-classpath">Packaging and Classpath</h2>

<p>The most common scenario is for all services to share the <span class="tc-bold">same</span> custom security. This is easily accomplished by placing the custom implementation classes in the <code>lib/optional/security</code> directory.</p>

<div class="tc-admon-note">
  
  <p>You can use a different directory by configuring the <code>com.gigaspaces.lib.opt.security</code> system property.</p>
</div>

<pre><code class="language-java">&lt;XAP root&gt;/lib/optional/security/my-custom-security.jar
</code></pre>

<p>Processing units may share a custom security implementation. In this case, the custom security jar can be placed under <code>pu-common</code>.</p>

<pre><code class="language-java">&lt;XAP root&gt;/lib/optional/pu-common/my-pu-custom-security.jar
</code></pre>

<p>If each processing unit has its <span class="tc-bold">own</span> custom security implementation, the custom security jar can be part of the processing unit distribution.</p>

<pre><code class="language-java">&lt;XAP root&gt;/deploy/hello-processor/lib/my-processor-custom-security.jar
</code></pre>

<div class="tc-admon-note">
  
  <p>It is recommended that the custom security jar should only contain security-related classes.</p>
</div>

</body>
</html>